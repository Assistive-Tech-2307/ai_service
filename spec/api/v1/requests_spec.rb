require 'rails_helper'

RSpec.describe "Request endpoints" do
  describe "Ai assistive technologies requests endpoint" do
    it "returns a list of technologies generated by the openai api", :vcr do

      data = {
        "needs": {
          "blind": {
            "tech_needs": ["screen readers"],
            "disability_description": ["are totaly blind and cannot use a mouse"]
          }
        }
      }
      
      post "/api/v1/ai_requests", params: data, as: :json

      expect(response).to be_successful

      result = JSON.parse(response.body, symbolize_names: true)

      expect(result).to have_key :data
      expect(result[:data]).to be_an Array

      expect(result[:data].first).to have_key :id
      expect(result[:data].first).to have_key :type
      expect(result[:data].first).to have_key :attributes
      expect(result[:data].first[:attributes]).to have_key :title
      expect(result[:data].first[:attributes]).to have_key :description
      expect(result[:data].first[:attributes]).to have_key :website
      expect(result[:data].first[:attributes]).to have_key :category

    end
    it "Can make queries for different tech categories and return the same types of results", :vcr do

      data = {
        "needs": {
          "Low Vision": {
          "tech_needs": ["CCTV"],
          "disability_description": ["have low vision"]
          }
        }
      }
      
      post "/api/v1/ai_requests", params: data, as: :json

      expect(response).to be_successful

      result = JSON.parse(response.body, symbolize_names: true)

      expect(result).to have_key :data
      expect(result[:data]).to be_an Array

      expect(result[:data].first).to have_key :id
      expect(result[:data].first).to have_key :type
      expect(result[:data].first).to have_key :attributes
      expect(result[:data].first[:attributes]).to have_key :title
      expect(result[:data].first[:attributes]).to have_key :description
      expect(result[:data].first[:attributes]).to have_key :website
      expect(result[:data].first[:attributes]).to have_key :category

    end
  end
  
  describe "Ai specific technology information endpoint" do
    it "returns detailed information on a specific technology", :vcr do
      tech = "JAWS(Job Access With Speech)"

      get "/api/v1/ai_requests?tech=#{tech}"

      expect(response).to be_successful

      result = JSON.parse(response.body, symbolize_names: true)

      expect(result).to have_key :data
      expect(result[:data]).to be_a Hash 
      expect(result[:data]).to have_key :id
      expect(result[:data]).to have_key :type
      expect(result[:data]).to have_key :attributes

      expect(result[:data][:type]).to eq("detailed_tech")
      expect(result[:data][:attributes]).to have_key :compatibility
      expect(result[:data][:attributes]).to have_key :versatility
      expect(result[:data][:attributes]).to have_key :professional_features
      expect(result[:data][:attributes]).to have_key :reliability
      expect(result[:data][:attributes]).to have_key :performance
      expect(result[:data][:attributes]).to have_key :community_engagement
      expect(result[:data][:attributes]).to have_key :detailed_description
    end

    it "can search for different technologies but still return the same schema of information", :vcr do
      tech = "NVDA (NonVisual Desktop Access)"

      get "/api/v1/ai_requests?tech=#{tech}"

      expect(response).to be_successful

      result = JSON.parse(response.body, symbolize_names: true)

      expect(result).to have_key :data
      expect(result[:data]).to be_a Hash 
      expect(result[:data]).to have_key :id
      expect(result[:data]).to have_key :type
      expect(result[:data]).to have_key :attributes

      expect(result[:data][:type]).to eq("detailed_tech")
      expect(result[:data][:attributes]).to have_key :compatibility
      expect(result[:data][:attributes]).to have_key :versatility
      expect(result[:data][:attributes]).to have_key :professional_features
      expect(result[:data][:attributes]).to have_key :reliability
      expect(result[:data][:attributes]).to have_key :performance
      expect(result[:data][:attributes]).to have_key :community_engagement
      expect(result[:data][:attributes]).to have_key :detailed_description
    end
  end
end